[{"body":"","link":"https://spkywood.github.io/tags/c++/","section":"tags","tags":null,"title":"C++"},{"body":"","link":"https://spkywood.github.io/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://spkywood.github.io/post/","section":"post","tags":null,"title":"Posts"},{"body":"","link":"https://spkywood.github.io/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"排序算法是最经典的算法知识。因为其实现代码短，应该广，在面试中经常会问到排序算法及其相关的问题。一般在面试中最常考的是快速排序和归并排序等基本的排序算法，并且经常要求现场手写基本的排序算法。\n排序算法稳定性：如果两个相等的数字，排序完成后，相对顺序不变，是稳定，否则是不稳定 排序算法优化思路：减少比较次数，减少交换次数。 1#pragma once 2 3#include \u0026lt;vector\u0026gt; 4#include \u0026lt;utility\u0026gt; 5 6template \u0026lt;typename T\u0026gt; 7class MySort { 8public: 9 void bubble(std::vector\u0026lt;T\u0026gt;\u0026amp;); 10 void selection(std::vector\u0026lt;T\u0026gt;\u0026amp;); 11 void insertion(std::vector\u0026lt;T\u0026gt;\u0026amp;); 12 void quick(std::vector\u0026lt;T\u0026gt;\u0026amp;, int, int); 13 void heap(std::vector\u0026lt;T\u0026gt;\u0026amp;); 14 15private: 16 void max_heapify(std::vector\u0026lt;T\u0026gt;\u0026amp;, int); 17}; 1. 冒泡排序 冒泡排序两层循环，内层循环依次比较相邻值的大小，将较大值依次向后交换，类似水中上浮的泡泡，逐渐变大，每次内层循环结束，最大值均出现在正确的位置。\n1void MySort::bubble(std::vector\u0026lt;T\u0026gt;\u0026amp; nums) { 2 for (int i = 0; i \u0026lt; nums.size(); ++i) { 3 // 内循环的边界是每次从0开始，结尾处减外循环 -1 防止溢出 4 for (int j = 0; j \u0026lt; nums.size()-i-1; ++j) { 5 if (nums[j] \u0026gt; nums[j+1]) { 6 std::swap(nums[j], nums[j+1]); 7 } 8 } 9 } 10} 2. 选择排序 3. 插入排序 4. 快速排序 5. 堆排序 ","link":"https://spkywood.github.io/post/sort-algorithm-cpp/","section":"post","tags":["排序算法","C++"],"title":"几种排序算法的实现"},{"body":"","link":"https://spkywood.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","section":"tags","tags":null,"title":"排序算法"},{"body":"","link":"https://spkywood.github.io/categories/%E7%AE%97%E6%B3%95/","section":"categories","tags":null,"title":"算法"},{"body":"","link":"https://spkywood.github.io/tags/katex/","section":"tags","tags":null,"title":"KaTex"},{"body":"","link":"https://spkywood.github.io/categories/%E6%95%B0%E5%AD%A6/","section":"categories","tags":null,"title":"数学"},{"body":"在网页中展示数学公式，使 Hugo 支持 LaTex 形式。已经生成好的静态页面中，使用 JavaScript 来渲染 LaTeX 形式的数学公式，本博客采用 KaTex 来渲染前端数学公式。\n数学公式有行内（inline）公式和区块（block）公式。 前者需要与同行的其它文字混排，而后者需要独占一行，居中显示。以下展示了两个行内公式和一个区块公式的测试代码。\n行内公式: \\(ax^2 + bx + c = 0 \\)\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a} \\tag{1}$$\n矩阵 没有括号的矩阵 $$ \\begin{matrix} 1 \u0026 2 \u0026 3 \\\\ 4 \u0026 5 \u0026 6 \\\\ 7 \u0026 8 \u0026 9 \\end{matrix} \\tag{2} $$ 括号 {} 的矩阵 $$ \\begin{Bmatrix} 1 \u0026 2 \u0026 3 \\\\ 4 \u0026 5 \u0026 6 \\\\ 7 \u0026 8 \u0026 9 \\end{Bmatrix} \\tag{3} $$ 括号 [] 的矩阵 $$ \\begin{bmatrix} 1 \u0026 2 \u0026 3 \\\\ 4 \u0026 5 \u0026 6 \\\\ 7 \u0026 8 \u0026 9 \\end{bmatrix} \\tag{4} $$ 对齐 使用 {aligned} 和 \u0026amp; 标记要对齐的位置，否则每行的公式自身都是居中的。\n$$ \\bigg\\lbrace\\begin{aligned} \u0026 x = 16\\sin^3t \\\\ \u0026 y = 13\\cos{t} - 5\\cos{2t} - 2\\cos{3t} - \\cos{4t} \\end{aligned} \\tag{5} $$ 上下标 $$ \\sum_{i=1}^n a_i \\tag{6} $$\n和、积、极限、积分 $$ \\sum_{i=1}^n a_i \\tag{7} $$\n$$ \\prod_{i=1}^n a_i \\tag{8} $$\n$$ \\lim_{x\\to\\infty} {1 \\over \\sqrt{x}} \\tag{9} $$\n$$ \\int_{-\\infty}^\\infty \\hat f\\xi,e^{2 \\pi i \\xi x} ,d\\xi \\tag{10} $$\n$$ \\to \\tag{11} $$\n省略号、空格 $$ \\dots \\quad \\cdots \\quad \\vdots \\quad \\ddots \\tag{12} $$\n上下水平划线 $$ \\overline{m+n} \\quad \\underline{m+n} \\tag{13} $$\n向量 使用 \\vec 语法。另两个命令 \\overrightarrow 和 \\overleftarrow 定义向量方向:\n$$ \\vec{a} \\quad \\overrightarrow{AB} \\quad \\overleftarrow{AB} \\tag{14} $$\n分数 分数（fraction）使用 \\frac{...}{...} 排版。\n$$ \\frac {x^2} {k +1} \\tag{15} $$\n","link":"https://spkywood.github.io/post/katex/","section":"post","tags":["KaTex"],"title":"数学公式常用写法"},{"body":"","link":"https://spkywood.github.io/","section":"","tags":null,"title":""},{"body":"","link":"https://spkywood.github.io/archives/","section":"","tags":null,"title":"文章归档"},{"body":" 为学日益，为道日损。损之又损，以至于无为。无为而无不为。\n","link":"https://spkywood.github.io/about/","section":"","tags":null,"title":"绵绵若存，用之不勤"},{"body":"","link":"https://spkywood.github.io/series/","section":"series","tags":null,"title":"Series"}]